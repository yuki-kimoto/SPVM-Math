class TestCase::Math {
  use Math;
  use Fn;

  static method E : int () {
    unless (Math->E() == 2.7182818284590452354) {
      return 0;
    }
    unless (Math->E() == 0x1.5bf0a8b145769p+1) {
      return 0;
    }
    return 1;
  }

  static method PI : int () {
    unless (Math->PI == 3.14159265358979323846) {
      return 0;
    }

    unless (Math->PI == 0x1.921fb54442d18p+1) {
      return 0;
    }

    return 1;
  }

  #
  # Integral type overflow is not defined in C99
  #
  static method unary_minus_int_overflow : int () {
    my $value = -Fn->INT32_MIN();

    unless ($value isa int) {
      return 0;
    }

    unless ($value == Fn->INT32_MIN()) {
      return 0;
    }

    return 1;
  }

  static method unary_minus_long_overflow : int () {
    my $value = -Fn->INT64_MIN();

    unless ($value isa long) {
      return 0;
    }

    unless ($value == Fn->INT64_MIN()) {
      return 0;
    }

    return 1;
  }

  #
  # Nan, Inf, sign operation is not defined in C99
  #
  static method unary_minus_float_inf : int () {
    {
      my $value = -Math->INFINITYF();

      unless ($value isa float) {
        return 0;
      }

      unless ($value == -Math->INFINITYF()) {
        return 0;
      }

      unless (-$value == Math->INFINITYF()) {
        return 0;
      }
    }
    return 1;
  }

  static method unary_minus_float_zero : int () {
    my $zero_plus = 0.0f;

    if (Math->signbitf($zero_plus)) {
      return 0;
    }

    my $zero_minus = -$zero_plus;

    unless ($zero_minus isa float) {
      return 0;
    }


    unless ($zero_minus == 0.0f) {
      return 0;
    }

    unless ($zero_minus == -0.0f) {
      return 0;
    }

    unless(Math->signbitf($zero_minus)) {
      return 0;
    }

    return 1;
  }

  static method unary_minus_float_nan : int () {
    my $value = -Math->NANF();

    unless ($value isa float) {
      return 0;
    }

    unless (Math->isnanf($value)) {
      return 0;
    }

    return 1;
  }

  static method unary_minus_double_inf : int () {
    my $value = -Math->INFINITY();

    unless ($value isa double) {
      return 0;
    }

    unless ($value == -Math->INFINITY()) {
      return 0;
    }

    unless (-$value == Math->INFINITY()) {
      return 0;
    }

    return 1;
  }

  static method unary_minus_double_zero : int () {
    my $zero_plus = 0.0;

    if (Math->signbit($zero_plus)) {
      return 0;
    }

    my $zero_minus = -$zero_plus;

    unless ($zero_minus isa double) {
      return 0;
    }

    unless ($zero_minus == 0.0) {
      return 0;
    }

    unless ($zero_minus == -0.0) {
      return 0;
    }

    unless(Math->signbit($zero_minus)) {
      return 0;
    }

    return 1;
  }

  static method unary_minus_double_nan : int () {
    my $value = -Math->NAN();

    unless ($value isa double) {
      return 0;
    }

    unless (Math->isnan($value)) {
      return 0;
    }

    return 1;
  }

  static method subtract_long_underflow : long () {
    return (long)-9223372036854775808L - (long)1;
  }

  #
  # Integral type overflow is not defined in C99
  #
  static method subtract_double_over_min : int () {
    my $total = -Fn->DBL_MAX() - +Fn->DBL_MAX();

    unless($total isa double) {
      return 0;
    }

    unless (Math->isinf($total)) {
      return 0;
    }

    unless ($total < 0) {
      return 0;
    }

    return 1;
  }
  static method subtract_overflow : int () {
    my $total = -2147483648 - 1;

    unless ($total == 2147483647) {
      return 0;
    }

    unless ($total isa int) {
      return 0;
    }

    return 1;
  }

  #
  # Nan, Inf, sign operation is not defined in C99
  #
  static method subtract_float_nan_left : int () {
    my $total = Math->NANF() - 3.0f;

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method subtract_float_nan_right : int () {
    my $total = 3.0f - Math->NANF();

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method subtract_double_nan_left : int () {
    my $total = Math->NAN() - 3.0;

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method subtract_double_nan_right : int () {
    my $total = 3.0 - Math->NAN();

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method subtract_float_plus_inf_minus_inf : int () {
    my $total = Math->INFINITYF() - Math->INFINITYF();

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method subtract_double_plus_inf_minus_inf : int () {
    my $total = Math->INFINITY() - Math->INFINITY();

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method subtract_float_inf_plus_value : int () {
    my $total = Math->INFINITYF() - 1;

    unless(Math->isinf($total)) {
      return 0;
    }

    unless($total > 0) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method subtract_double_inf_plus_value : int () {
    my $total = Math->INFINITY() - 1;

    unless(Math->isinf($total)) {
      return 0;
    }

    unless($total > 0) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method subtract_float_minus_inf_minus_value : int () {
    my $total = -Math->INFINITYF() - 1;

    unless(Math->isinf($total)) {
      return 0;
    }

    unless($total < 0) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method subtract_double_minus_inf_minus_value : int () {
    my $total = -Math->INFINITY() - 1;

    unless(Math->isinf($total)) {
      return 0;
    }

    unless($total < 0) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method subtract_float_plus_zero_minus_zero : int () {
    my $total = 0.0f - (0.0f);

    unless($total == 0f) {
      return 0;
    }

    if (Math->signbit($total)) {
      return 0;
    }

    return 1;
  }

  static method subtract_double_plus_zero_minus_zero : int () {
    my $total = 0.0 - (0.0);

    unless($total == 0) {
      return 0;
    }

    if (Math->signbit($total)) {
      return 0;
    }

    return 1;
  }

  static method subtract_float_over_max : int () {
    my $total = Fn->FLT_MAX() - (-Fn->FLT_MAX());

    unless($total isa float) {
      return 0;
    }

    unless (Math->isinff($total)) {
      return 0;
    }

    unless ($total > 0) {
      return 0;
    }

    return 1;
  }

  static method subtract_double_over_max : int () {
    my $total = Fn->DBL_MAX() - (-Fn->DBL_MAX());

    unless($total isa double) {
      return 0;
    }

    unless (Math->isinf($total)) {
      return 0;
    }

    unless ($total > 0) {
      return 0;
    }

    return 1;
  }

  static method subtract_float_over_min : int () {
    my $total = -Fn->FLT_MAX() - +Fn->FLT_MAX();

    unless($total isa float) {
      return 0;
    }

    unless (Math->isinff($total)) {
      return 0;
    }

    unless ($total < 0) {
      return 0;
    }

    return 1;
  }

  #
  # Integral type overflow is not defined in C99
  #
  static method add_long_overflow : long () {
    return (long)9223372036854775807L + (long)1;
  }
  static method add_overflow : int () {
    my $total = 2147483647 + 1;

    unless ($total == -2147483648) {
      return 0;
    }

    unless ($total isa int) {
      return 0;
    }

    return 1;
  }

  #
  # Nan, Inf, sign operation is not defined in C99
  #
  static method add_double_same_sign_zero : int () {
    {
      my $total = 0.0 + 0.0;

      unless ($total == 0) {
        return 0;
      }

      if (Math->signbit($total)) {
        return 0;
      }
    }
    {
      my $total = -0.0 + -0.0;

      unless($total == 0) {
        return 0;
      }

      unless (Math->signbit($total)) {
        return 0;
      }
    }

    return 1;
  }

  static method add_float_plus_zero_minus_zero : int () {
    my $total = 0.0f + (-0.0f);

    unless($total == 0f) {
      return 0;
    }

    if (Math->signbit($total)) {
      return 0;
    }

    return 1;
  }

  static method add_double_plus_zero_minus_zero : int () {
    my $total = 0.0 + (-0.0);

    unless($total == 0) {
      return 0;
    }

    if (Math->signbit($total)) {
      return 0;
    }

    return 1;
  }

  static method add_float_same_sign_zero : int () {
    {
      my $total = 0.0f + 0.0f;

      unless ($total == 0f) {
        return 0;
      }

      if (Math->signbitf($total)) {
        return 0;
      }
    }
    {
      my $total = -0.0f + -0.0f;

      unless($total == 0f) {
        return 0;
      }

      unless (Math->signbitf($total)) {
        return 0;
      }
    }

    return 1;
  }


  static method add_float_over_max : int () {
    my $total = Fn->FLT_MAX() + Fn->FLT_MAX();

    unless($total isa float) {
      return 0;
    }

    unless (Math->isinff($total)) {
      return 0;
    }

    unless ($total > 0) {
      return 0;
    }

    return 1;
  }
  static method add_double_over_max : int () {
    my $total = Fn->DBL_MAX() + Fn->DBL_MAX();

    unless($total isa double) {
      return 0;
    }

    unless (Math->isinf($total)) {
      return 0;
    }

    unless ($total > 0) {
      return 0;
    }

    return 1;
  }
  static method add_float_over_min : int () {
    my $total = -Fn->FLT_MAX() + -Fn->FLT_MAX();

    unless($total isa float) {
      return 0;
    }

    unless (Math->isinff($total)) {
      return 0;
    }

    unless ($total < 0) {
      return 0;
    }

    return 1;
  }
  static method add_double_over_min : int () {
    my $total = -Fn->DBL_MAX() + -Fn->DBL_MAX();

    unless($total isa double) {
      return 0;
    }

    unless (Math->isinf($total)) {
      return 0;
    }

    unless ($total < 0) {
      return 0;
    }

    return 1;
  }

  static method add_float_nan_left : int () {
    my $total = Math->NANF() + 3.0f;

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method add_float_nan_right : int () {
    my $total = 3.0f + Math->NANF();

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method add_double_nan_left : int () {
    my $total = Math->NAN() + 3.0;

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method add_double_nan_right : int () {
    my $total = 3.0 + Math->NAN();

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method add_float_plus_inf_minus_inf : int () {
    my $total = Math->INFINITYF() + (-Math->INFINITYF());

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method add_double_plus_inf_minus_inf : int () {
    my $total = Math->INFINITY() + (-Math->INFINITY());

    unless(Math->isnan($total)) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method add_float_inf_plus_value : int () {
    my $total = Math->INFINITYF() + 1;

    unless(Math->isinf($total)) {
      return 0;
    }

    unless($total > 0) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method add_double_inf_plus_value : int () {
    my $total = Math->INFINITY() + 1;

    unless(Math->isinf($total)) {
      return 0;
    }

    unless($total > 0) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method add_float_minus_inf_minus_value : int () {
    my $total = -Math->INFINITYF() + 1;

    unless(Math->isinf($total)) {
      return 0;
    }

    unless($total < 0) {
      return 0;
    }

    unless($total isa float) {
      return 0;
    }

    return 1;
  }

  static method add_double_minus_inf_minus_value : int () {
    my $total = -Math->INFINITY() + 1;

    unless(Math->isinf($total)) {
      return 0;
    }

    unless($total < 0) {
      return 0;
    }

    unless($total isa double) {
      return 0;
    }

    return 1;
  }

  static method isinff: int () {
    if (Math->isinff(Math->INFINITYF())) {
      if (!Math->isinff(Math->NANF())) {
        if (!Math->isinff(0.1f)) {
          return 1;
        }
      }
    }

    return 0;
  }

  static method isfinitef: int () {
    if (!Math->isfinitef(Math->INFINITYF())) {
      if (!Math->isfinitef(Math->NANF())) {
        if (Math->isfinitef(0.1f)) {
          return 1;
        }
      }
    }

    return 0;
  }

  static method isnanf: int () {
    if (!Math->isnanf(Math->INFINITYF())) {
      if (Math->isnanf(Math->NANF())) {
        if (!Math->isnanf(0.1f)) {
          return 1;
        }
      }
    }

    return 0;
  }

  static method float_pass_positive_infinity : int ($value : float) {
    if ($value == Math->INFINITYF()) {
      return 1;
    }

    return 0;
  }

  static method float_pass_nan : int ($value : float) {
    if (Math->isnanf($value)) {
      return 1;
    }

    return 0;
  }

  static method isinf : int () {
    if (Math->isinf(Math->INFINITY())) {
      if (!Math->isinf(Math->NAN())) {
        if (!Math->isinf(0.1)) {
          return 1;
        }
      }
    }

    return 0;
  }

  static method isfinite : int () {
    if (!Math->isfinite(Math->INFINITY())) {
      if (!Math->isfinite(Math->NAN())) {
        if (Math->isfinite(0.1)) {
          return 1;
        }
      }
    }

    return 0;
  }

  static method isnan : int () {
    if (!Math->isnan(Math->INFINITY())) {
      if (Math->isnan(Math->NAN())) {
        if (!Math->isnan(0.1)) {
          return 1;
        }
      }
    }

    return 0;
  }

  static method double_pass_nan : int ($value : double) {
    if (Math->isnan($value)) {
      return 1;
    }

    return 0;
  }

  static method double_pass_positive_infinity : int ($value : double) {
    if ($value == Math->INFINITY()) {
      return 1;
    }

    return 0;
  }

  # Trigonometric functions
  static method cos : int () {
    my $value = Math->cos(Math->PI / 2.0);

    if ($value < 0.000001 && $value > -0.000001) {
      return 1;
    }
    return 0;
  }

  static method cosf : int () {
    my $value = Math->cosf((float)(Math->PI / 2.0));

    if ($value < 0.0001f && $value > -0.0001f) {
      return 1;
    }
    return 0;
  }

  static method sin : int () {
    my $value = Math->sin(Math->PI);

    if ($value < 0.000001 && $value > -0.000001) {
      return 1;
    }
    return 0;
  }

  static method sinf : int () {
    my $value = Math->sinf((float)Math->PI);

    if ($value < 0.0001f && $value > -0.0001f) {
      return 1;
    }
    return 0;
  }

  static method tan : int () {
    my $value = Math->tan(Math->PI / 4.0);

    if ($value - 1.0 < 0.000001 && $value - 1.0 > -0.000001) {
      return 1;
    }
    return 0;
  }

  static method tanf : int () {
    my $value = Math->tanf((float)(Math->PI / 4.0));

    if ($value - 1.0 < 0.0001f && $value - 1.0 > -0.0001f) {
      return 1;
    }
    return 0;
  }

  static method acos : int () {
    my $eps      = 0.000000001;
    my $got      = Math->acos(0.866025403784438646763723170752936183471402626905190314027);
    my $expected = Math->PI / 6;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method acosf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->acosf(0.866025403784438646763723170752936183471402626905190314027f);
    my $expected = (float)(Math->PI / 6);
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method asin : int () {
    my $eps      = 0.000000001;
    my $got      = Math->asin(0.5);
    my $expected = Math->PI / 6;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method asinf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->asinf(0.5f);
    my $expected = (float)(Math->PI / 6);
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method atan : int () {
    my $eps      = 0.000000001;
    my $got      = Math->atan(0.577350269189625764509148780501957455647601751270126876018);
    my $expected = Math->PI / 6;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method atanf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->atanf(0.577350269189625764509148780501957455647601751270126876018f);
    my $expected = (float)(Math->PI / 6);
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method atan2 : int () {
    my $eps      = 0.000000001;
    my $got      = Math->atan2(0.777350269189625764509148780501957455647601751270126876018, 0.577350269189625764509148780501957455647601751270126876018);
    my $expected = 0.9319734769439985;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method atan2f : int () {
    my $eps      = 0.0001f;
    my $got      = Math->atan2f(0.777350269189625764509148780501957455647601751270126876018f, 0.577350269189625764509148780501957455647601751270126876018f);
    my $expected = 0.9319734769439985f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  # Hyperbolic functions
  static method cosh : int () {
    my $eps      = 0.000000001;
    my $got      = Math->cosh(0.5);
    my $expected = 1.127625965206380785226225161402672012547847118098667483628;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method coshf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->coshf(0.5f);
    my $expected = 1.127625965206380785226225161402672012547847118098667483628f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method sinh : int () {
    my $eps      = 0.000000001;
    my $got      = Math->sinh(0.5);
    my $expected = 0.521095305493747361622425626411491559105928982611480527946;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method sinhf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->sinhf(0.5f);
    my $expected = 0.521095305493747361622425626411491559105928982611480527946f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method tanh : int () {
    my $eps      = 0.000000001;
    my $got      = Math->tanh(0.5);
    my $expected = 0.462117157260009758502318483643672548730289280330113038552;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method tanhf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->tanhf(0.5f);
    my $expected = 0.462117157260009758502318483643672548730289280330113038552f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method acosh : int () {
    my $eps      = 0.000000001;
    my $got      = Math->acosh(Math->PI / 2);
    my $expected = 1.023227478547550579317495677949303852301405666414862096802;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method acoshf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->acoshf((float)(Math->PI / 2));
    my $expected = 1.023227478547550579317495677949303852301405666414862096802f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method asinh : int () {
    my $eps      = 0.000000001;
    my $got      = Math->asinh(Math->PI);
    my $expected = 1.862295743310848219888361325182620574902674184961554765612;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method asinhf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->asinhf((float)Math->PI);
    my $expected = 1.862295743310848219888361325182620574902674184961554765612f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method atanh : int () {
    my $eps      = 0.000000001;
    my $got      = Math->atanh(0.5);
    my $expected = 0.549306144334054845697622618461262852323745278911374725867;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method atanhf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->atanhf(0.5f);
    my $expected = 0.549306144334054845697622618461262852323745278911374725867f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method exp : int () {
    my $eps      = 0.000000001;
    my $got      = Math->exp(1);
    my $expected = 2.718281828459045235360287471352662497757247093699959574966;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method expf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->expf(1f);
    my $expected = 2.718281828459045235360287471352662497757247093699959574966f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method exp2 : int () {
    my $eps      = 0.000000001;
    my $got      = Math->exp2(Math->PI);
    my $expected = 8.824977827076287623856429604208001581704410815271484926668;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method exp2f : int () {
    my $eps      = 0.0001f;
    my $got      = Math->exp2f((float)Math->PI);
    my $expected = 8.824977827076287623856429604208001581704410815271484926668f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method expm1 : int () {
    my $eps      = 0.000000001;
    my $got      = Math->expm1(1);
    my $expected = 1.718281828459045235360287471352662497757247093699959574966;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method expm1f : int () {
    my $eps      = 0.0001f;
    my $got      = Math->expm1f(1f);
    my $expected = 1.718281828459045235360287471352662497757247093699959574966f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method frexp : int () {
    my $eps          = 0.000000001;
    my $got_exp : int;
    my $got          = Math->frexp(Math->PI, \$got_exp);
    my $expected_exp = 2;
    my $expected     = 0.78539816339744827900;
    unless ($got_exp == $expected_exp) {
      return 0;
    }
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    
    # Exceptions
    {
      eval { Math->frexp(Math->PI, undef); }
      
      unless ($@) {
        return 0;
      }
    }
    
    return 1;
  }

  static method frexpf : int () {
    my $eps          = 0.0001f;
    my $got_exp : int;
    my $got          = Math->frexpf((float)Math->PI, \$got_exp);
    my $expected_exp = 2;
    my $expected     = 0.78539816339744827900f;
    unless ($got_exp == $expected_exp) {
      return 0;
    }
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    
    # Exceptions
    {
      eval { Math->frexpf((float)Math->PI, undef); }
      
      unless ($@) {
        return 0;
      }
    }
    
    return 1;
  }

  static method ilogb : int () {
    my $got = Math->ilogb(1024.1111111111111111111111);
    my $expected = 10;
    unless ($got == $expected) {
      return 0;
    }
    unless (Math->ilogb(0) == Math->FP_ILOGB0) {
      return 0;
    }
    unless (Math->ilogb(Math->NAN) == Math->FP_ILOGBNAN) {
      return 0;
    }
    return 1;
  }

  static method ilogbf : int () {
    my $got = Math->ilogbf(1024.111111111111111111111f);
    my $expected = 10;
    unless ($got == $expected) {
      return 0;
    }
    unless (Math->ilogbf(0) == Math->FP_ILOGB0) {
      return 0;
    }
    unless (Math->ilogbf(Math->NANF) == Math->FP_ILOGBNAN) {
      return 0;
    }
    return 1;
  }

  static method ldexp : int () {
    my $eps      = 0.000000001;
    my $got      = Math->ldexp(Math->PI, 3);
    my $expected = 25.13274122871834590770114706623602307357735519500084656779;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method ldexpf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->ldexpf((float)Math->PI, 3);
    my $expected = 25.13274122871834590770114706623602307357735519500084656779f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method log : int () {
    my $eps      = 0.000000001;
    my $got      = Math->log(Math->PI);
    my $expected = 1.144729885849400174143427351353058711647294812915311571513;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method logf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->logf((float)Math->PI);
    my $expected = 1.144729885849400174143427351353058711647294812915311571513f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method log10 : int () {
    my $eps      = 0.000000001;
    my $got      = Math->log10(Math->PI);
    my $expected = 0.497149872694133854351268288290898873651678324380442446134;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method log10f : int () {
    my $eps      = 0.0001f;
    my $got      = Math->log10f((float)Math->PI);
    my $expected = 0.497149872694133854351268288290898873651678324380442446134f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method log1p : int () {
    my $eps      = 0.000000001;
    my $got      = Math->log1p(Math->PI);
    my $expected = 1.421080412794292633053772196333719458985758681678943714407;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method log1pf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->log1pf((float)Math->PI);
    my $expected = 1.421080412794292633053772196333719458985758681678943714407f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method log2 : int () {
    my $eps      = 0.000000001;
    my $got      = Math->log2(Math->PI);
    my $expected = 1.651496129472318798043279295108007335018476926763041529406;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method log2f : int () {
    my $eps      = 0.0001f;
    my $got      = Math->log2f((float)Math->PI);
    my $expected = 1.651496129472318798043279295108007335018476926763041529406f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method logb : int () {
    my $got      = Math->logb(Math->PI);
    my $expected = 1;
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method logbf : int () {
    my $got      = Math->logbf((float)Math->PI);
    my $expected = 1f;
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method modf : int () {
    my $eps          = 0.000000001;
    my $got_intpart : double;
    my $got          = Math->modf(Math->PI, \$got_intpart);
    my $expected_intpart = 3.0;
    my $expected     = Math->PI - 3.0;
    unless ($got_intpart == $expected_intpart) {
      return 0;
    }
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    
    # Exceptions
    {
      eval { Math->modf(Math->PI, undef); }
      
      unless ($@) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method modff : int () {
    my $eps          = 0.0001f;
    my $got_intpart : float;
    my $got          = Math->modff((float)Math->PI, \$got_intpart);
    my $expected_intpart = 3.0f;
    my $expected     = (float)(Math->PI - 3.0);
    unless ($got_intpart == $expected_intpart) {
      return 0;
    }
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    
    # Exceptions
    {
      eval { Math->modff((float)Math->PI, undef); }
      
      unless ($@) {
        return 0;
      }
    }
    
    return 1;
  }

  static method scalbn : int () {
    my $eps      = 0.000000001;
    my $got      = Math->scalbn(Math->PI, 10);
    my $expected = 3216.990877275948150781914591789246;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method scalbnf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->scalbnf((float)Math->PI, 10);
    my $expected = 3216.990877275948150781914591789246f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method scalbln : int () {
    my $eps      = 0.000000001;
    my $got      = Math->scalbln(Math->PI, (long)10);
    my $expected = 3216.990877275948150781914591789246;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method scalblnf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->scalblnf((float)Math->PI, (long)10);
    my $expected = 3216.990877275948150781914591789246f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method cbrt : int () {
    my $eps      = 0.000000001;
    my $got      = Math->cbrt(Math->PI);
    my $expected = 1.464591887561523263020142527263790391738596855627937174357;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method cbrtf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->cbrtf((float)Math->PI);
    my $expected = 1.464591887561523263020142527263790391738596855627937174357f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method abs : int () {
    # Positive value
    {
      my $num      = 2147483647;
      my $abs      = Math->abs($num);
      unless ($abs == 2147483647) {
        return 0;
      }
    }

    # Negative value
    {
      my $num      = -2147483647;
      my $abs      = Math->abs($num);
      unless ($abs == 2147483647) {
        return 0;
      }
    }
    # 0
    {
      my $num      = 0;
      my $abs      = Math->abs($num);
      unless ($abs == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  static method labs : int () {
    # Positive value
    {
      my $num      = 9223372036854775807L;
      my $labs      = Math->labs($num);
      unless ($labs == 9223372036854775807L) {
        return 0;
      }
    }

    # Negative value
    {
      my $num      = -9223372036854775807L;
      my $labs      = Math->labs($num);
      unless ($labs == 9223372036854775807L) {
        return 0;
      }
    }
    # 0
    {
      my $num      = 0;
      my $labs      = Math->labs($num);
      unless ($labs == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method fabs : int () {
    my $eps      = 0.000000001;
    my $got      = Math->fabs(-Math->PI);
    my $expected = Math->PI;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method fabsf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->fabsf((float)(-Math->PI));
    my $expected = (float)Math->PI;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method hypot : int () {
    my $eps      = 0.000000001;
    my $e        = 2.718281828459045235360287471352662497757247093699959574966;
    my $got      = Math->hypot(Math->PI, $e);
    my $expected = 4.154354402313313572948121466679053097883112964956925650570;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method hypotf : int () {
    my $eps      = 0.0001f;
    my $e        = 2.718281828459045235360287471352662497757247093699959574966f;
    my $got      = Math->hypotf((float)Math->PI, $e);
    my $expected = 4.154354402313313572948121466679053097883112964956925650570f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method pow : int () {
    my $eps      = 0.000000001;
    my $got      = Math->pow(Math->PI, Math->PI);
    my $expected = 36.46215960720791177099082602269212366636550840222881873870;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method powf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->powf((float)Math->PI, (float)Math->PI);
    my $expected = 36.46215960720791177099082602269212366636550840222881873870f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method sqrt : int () {
    my $eps      = 0.000000001;
    my $got      = Math->sqrt(Math->PI);
    my $expected = 1.772453850905516027298167483341145182797549456122387128213;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method sqrtf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->sqrtf((float)Math->PI);
    my $expected = 1.772453850905516027298167483341145182797549456122387128213f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method erf : int () {
    my $eps      = 0.000000001;
    my $got      = Math->erf(Math->PI);
    my $expected = 0.999991123853632358394731620781202944712382081512876599047;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method erff : int () {
    my $eps      = 0.0001f;
    my $got      = Math->erff((float)Math->PI);
    my $expected = 0.999991123853632358394731620781202944712382081512876599047f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method erfc : int () {
    my $eps      = 0.000000001;
    my $got      = Math->erfc(Math->PI);
    my $expected = 0.0000088761463676416052683792187970552876179184871234009524;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method erfcf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->erfc(1.11111111111111111111);
    my $expected = 0.116101743980548643691465409255702973167155793605751332090f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method lgamma : int () {
    my $eps      = 0.000000001;
    my $got      = Math->lgamma(Math->PI);
    my $expected = 0.827694592323437101529578558452359951153501734120737316791;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method lgammaf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->lgammaf((float)Math->PI);
    my $expected = 0.827694592323437101529578558452359951153501734120737316791f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method tgamma : int () {
    my $eps      = 0.000000001;
    my $got      = Math->tgamma(Math->PI);
    my $expected = 2.288037795340032417959588909060233922889688153356222441199;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method tgammaf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->tgammaf((float)Math->PI);
    my $expected = 2.288037795340032417959588909060233922889688153356222441199f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method ceil : int () {
    my $got      = Math->ceil(Math->PI);
    my $expected = 4;
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method ceilf : int () {
    my $got      = Math->ceilf((float)Math->PI);
    my $expected = 4;
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method floor : int () {
    my $got      = Math->floor(Math->PI);
    my $expected = 3;
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method floorf : int () {
    my $got      = Math->floorf((float)Math->PI);
    my $expected = 3;
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method nearbyint : int () {
    {
      if (Math->fesetround(Math->FE_DOWNWARD)) {
        die "failed to set fesetround(FE_DOWNWARD)";
      }
      {
        my $got = Math->nearbyint(Math->PI);
        my $expected = 3;
        unless ($got == $expected) {
          return 0;
        }
      }
      {
        my $got = Math->nearbyint(-Math->PI);
        my $expected = -4;
        unless ($got == $expected) {
          return 0;
        }
      }
    }
    {
      if (Math->fesetround(Math->FE_TONEAREST)) {
        die "failed to set fesetround(FE_TONEAREST)";
      }
      {
        my $got = Math->nearbyint(Math->PI);
        my $expected = 3;
        unless ($got == $expected) {
          return 0;
        }
      }
      {
        my $got = Math->nearbyint(Math->PI * 4);
        my $expected = 13;
        unless ($got == $expected) {
          return 0;
        }
      }
    }
    {
      if (Math->fesetround(Math->FE_TOWARDZERO)) {
        die "failed to set fesetround(FE_TOWARDZERO)";
      }
      {
        my $got = Math->nearbyint(Math->PI);
        my $expected = 3;
        unless ($got == $expected) {
          return 0;
        }
      }
      {
        my $got = Math->nearbyint(-Math->PI);
        my $expected = -3;
        unless ($got == $expected) {
          return 0;
        }
      }
    }
    {
      if (Math->fesetround(Math->FE_UPWARD)) {
        die "failed to set fesetround(FE_UPWARD)";
      }
      {
        my $got = Math->nearbyint(Math->PI);
        my $expected = 4;
        unless ($got == $expected) {
          return 0;
        }
      }
      {
        my $got = Math->nearbyint(-Math->PI);
        my $expected = -3;
        unless ($got == $expected) {
          return 0;
        }
      }
    }
    return 1;
  }

  static method nearbyintf : int () {
    {
      if (Math->fesetround(Math->FE_DOWNWARD)) {
        die "failed to set fesetround(FE_DOWNWARD)";
      }
      {
        my $got = Math->nearbyintf((float)Math->PI);
        my $expected = 3;
        unless ($got == $expected) {
          return 0;
        }
      }
      {
        my $got = Math->nearbyintf((float)(-Math->PI));
        my $expected = -4;
        unless ($got == $expected) {
          return 0;
        }
      }
    }
    {
      if (Math->fesetround(Math->FE_TONEAREST)) {
        die "failed to set fesetround(FE_TONEAREST)";
      }
      {
        my $got = Math->nearbyintf((float)Math->PI);
        my $expected = 3;
        unless ($got == $expected) {
          return 0;
        }
      }
      {
        my $got = Math->nearbyintf((float)Math->PI * 4);
        my $expected = 13;
        unless ($got == $expected) {
          return 0;
        }
      }
    }
    {
      if (Math->fesetround(Math->FE_TOWARDZERO)) {
        die "failed to set fesetround(FE_TOWARDZERO)";
      }
      {
        my $got = Math->nearbyintf((float)Math->PI);
        my $expected = 3;
        unless ($got == $expected) {
          return 0;
        }
      }
      {
        my $got = Math->nearbyintf((float)(-Math->PI));
        my $expected = -3;
        unless ($got == $expected) {
          return 0;
        }
      }
    }
    {
      if (Math->fesetround(Math->FE_UPWARD)) {
        die "failed to set fesetround(FE_UPWARD)";
      }
      {
        my $got = Math->nearbyintf((float)Math->PI);
        my $expected = 4;
        unless ($got == $expected) {
          return 0;
        }
      }
      {
        my $got = Math->nearbyintf((float)(-Math->PI));
        my $expected = -3;
        unless ($got == $expected) {
          return 0;
        }
      }
    }
    return 1;
  }

  static method round : int () {
    my $got      = Math->round(Math->PI);
    my $expected = 3;
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method roundf : int () {
    my $got      = Math->roundf((float)Math->PI);
    my $expected = 3;
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method lround : int () {
    my $got      = Math->lround(Math->PI * 1000000000);
    my $expected = 3141592654L;
    
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method lroundf : int () {
    my $got      = Math->lroundf((float)(Math->PI * 100000));
    my $expected = 314159L;
    unless ($got == $expected) {
      return 0;
    }
    return 1;
  }

  static method trunc : int () {
    {
      my $got = Math->trunc(Math->PI * 4);
      my $expected = 12;
      unless ($got == $expected) {
        return 0;
      }
    }
    {
      my $got = Math->trunc(-Math->PI * 4);
      my $expected = -12;
      unless ($got == $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method truncf : int () {
    {
      my $got = Math->truncf((float)(Math->PI * 4));
      my $expected = 12;
      unless ($got == $expected) {
        return 0;
      }
    }
    {
      my $got = Math->truncf((float)(-Math->PI * 4));
      my $expected = -12;
      unless ($got == $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method fmod : int () {
    my $eps      = 0.000000001;
    my $got      = Math->fmod(Math->PI, 2.1);
    my $expected = 1.0415926535897932384626433832795028841971693993751058;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method fmodf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->fmodf((float)Math->PI, 2.1f);
    my $expected = 1.0415926535897932384626433832795028841971693993751058f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method remainder : int () {
    my $eps      = 0.000000001;
    my $got      = Math->remainder(Math->PI, 2.0);
    my $expected = -0.85840734641020688400;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method remainderf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->remainderf((float)Math->PI, 2.0f);
    my $expected = -0.85840734641020688400f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method remquo : int () {
    my $eps           = 0.000000001;
    my $got_quo : int;
    my $got           = Math->remquo(Math->PI, 2.0, \$got_quo);
    my $expected      = -0.85840734641020688400;
    my $expected_quo  = 2;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    unless ($got_quo == $expected_quo) {
      return 0;
    }
    # Exceptions
    {
      eval { Math->remquo(Math->PI, 2.0, undef); }
      
      unless ($@) {
        return 0;
      }
    }
    
    return 1;
  }

  static method remquof : int () {
    my $eps           = 0.0001f;
    my $got_quo : int;
    my $got           = Math->remquof((float)Math->PI, 2.0f, \$got_quo);
    my $expected      = -0.85840734641020688400f;
    my $expected_quo  = 2;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    unless ($got_quo == $expected_quo) {
      return 0;
    }
    
    # Exceptions
    {
      eval { Math->remquof((float)Math->PI, 2.0f, undef); }
      
      unless ($@) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method copysign : int () {
    {
      my $eps = 0.000000001;
      my $got = Math->copysign(Math->PI, Math->PI);
      my $expected = Math->PI;
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
    }
    {
      my $eps = 0.000000001;
      my $got = Math->copysign(-Math->PI, Math->PI);
      my $expected = Math->PI;
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
    }
    {
      my $eps = 0.000000001;
      my $got = Math->copysign(Math->PI, -Math->PI);
      my $expected = -Math->PI;
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
    }
    {
      my $eps = 0.000000001;
      my $got = Math->copysign(-Math->PI, -Math->PI);
      my $expected = -Math->PI;
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
    }
    return 1;
  }

  static method copysignf : int () {
    {
      my $eps = 0.0001f;
      my $got = Math->copysignf((float)(-Math->PI), (float)Math->PI);
      my $expected = (float)Math->PI;
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
    }
    {
      my $eps = 0.0001f;
      my $got = Math->copysignf((float)(-Math->PI), (float)Math->PI);
      my $expected = (float)Math->PI;
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
    }
    {
      my $eps = 0.0001f;
      my $got = Math->copysignf((float)(-Math->PI), (float)(-Math->PI));
      my $expected = (float)(-Math->PI);
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
    }
    {
      my $eps = 0.0001f;
      my $got = Math->copysignf((float)(-Math->PI), (float)(-Math->PI));
      my $expected = (float)(-Math->PI);
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
    }
    return 1;
  }

  static method nan : int () {
    unless (Math->isnan(Math->nan("test"))) {
      return 0;
    }
    eval {
      Math->nan(undef);
    };
    unless ($@ && Fn->index($@, "String must be defined", 0) > -1) {
      return 0;
    }
    
    return 1;
  }

  static method nanf : int () {
    unless (Math->isnan(Math->nanf("test"))) {
      return 0;
    }
    eval {
      Math->nanf(undef);
    };
    unless ($@ && Fn->index($@, "String must be defined", 0) > -1) {
      return 0;
    }
    
    return 1;
  }
  static method nextafter : int () {
    my $eps      = 0.000000001;
    my $got      = Math->nextafter(Math->PI, 10.0);
    my $expected = 3.141592653589793560087173318606801331043243408203125;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method nextafterf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->nextafterf((float)Math->PI, 10.0f);
    my $expected = 3.141592653589793560087173318606801331043243408203125f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }
  static method nexttoward : int () {
    my $eps      = 0.000000001;
    my $got      = Math->nexttoward(Math->PI, 10.0);
    my $expected = 3.141592653589793560087173318606801331043243408203125;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method nexttowardf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->nexttowardf((float)Math->PI, 10.0f);
    my $expected = 3.141592653589793560087173318606801331043243408203125f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method fdim : int () {
    {
      my $eps = 0.000000001;
      my $got = Math->fdim(Math->PI, Math->PI / 2);
      my $expected = 1.5707963267948965579989817342720925807952880859375;
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
    }
    {
      my $got = Math->fdim(Math->PI / 2, Math->PI);
      my $expected = 0;
      unless ($got == $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method fdimf : int () {
    {
      my $eps      = 0.0001f;
      my $got      = Math->fdimf((float)Math->PI, (float)Math->PI / 2);
      my $expected = 1.5707963267948965579989817342720925807952880859375f;
      unless ($expected - $eps <= $got && $got <= $expected + $eps) {
        return 0;
      }
      return 1;
    }
    {
      my $got      = Math->fdimf((float)Math->PI / 2, (float)Math->PI);
      my $expected = 0;
      unless ($got == $expected) {
        return 0;
      }
      return 1;
    }
  }

  static method fmax : int () {
    my $eps      = 0.000000001;
    my $got      = Math->fmax(Math->PI, Math->PI / 2);
    my $expected = Math->PI;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method fmaxf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->fmaxf((float)Math->PI, (float)Math->PI / 2);
    my $expected = (float)Math->PI;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method fmin : int () {
    my $eps      = 0.000000001;
    my $got      = Math->fmin(Math->PI, Math->PI / 2);
    my $expected = Math->PI / 2;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method fminf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->fminf((float)Math->PI, (float)Math->PI / 2);
    my $expected = (float)Math->PI / 2f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method fma : int () {
    my $eps      = 0.000000001;
    my $got      = Math->fma(Math->PI, Math->PI / 2, Math->PI / 3);
    my $expected = 5.98199975174127640542565131909213960170745849609375;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method fmaf : int () {
    my $eps      = 0.0001f;
    my $got      = Math->fmaf((float)Math->PI, (float)Math->PI / 2, (float)Math->PI / 3);
    my $expected = 5.98199975174127640542565131909213960170745849609375f;
    unless ($expected - $eps <= $got && $got <= $expected + $eps) {
      return 0;
    }
    return 1;
  }

  static method fpclassify : int () {
    {
      my $got = Math->fpclassify(Math->INFINITY);
      my $expected = Math->FP_INFINITE;
      unless ($got == $expected) {
        return 0;
      }
    }
    {
      my $got = Math->fpclassify(Math->NAN);
      my $expected = Math->FP_NAN;
      unless ($got == $expected) {
        return 0;
      }
    }
    {
      my $got = Math->fpclassify(-0.0);
      my $expected = Math->FP_ZERO;
      unless ($got == $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method fpclassifyf : int () {
    {
      my $got = Math->fpclassifyf(Math->INFINITYF);
      my $expected = Math->FP_INFINITE;
      unless ($got == $expected) {
        return 0;
      }
    }
    {
      my $got = Math->fpclassifyf(Math->NANF);
      my $expected = Math->FP_NAN;
      unless ($got == $expected) {
        return 0;
      }
    }
    {
      my $got = Math->fpclassifyf(-0.0f);
      my $expected = Math->FP_ZERO;
      unless ($got == $expected) {
        return 0;
      }
    }
    return 1;
  }

  static method signbit : int () {
    unless (Math->signbit(-1.0)) {
      return 0;
    }
    unless (Math->signbit(-0.0)) {
      return 0;
    }
    unless (Math->signbit(-Math->NAN)) {
      return 0;
    }
    if (Math->signbit(1.0)) {
      return 0;
    }
    if (Math->signbit(0.0)) {
      return 0;
    }
    if (Math->signbit(Math->NAN)) {
      return 0;
    }
    return 1;
  }

  static method signbitf : int () {
    unless (Math->signbitf(-1.0f)) {
      return 0;
    }
    unless (Math->signbitf(-0.0f)) {
      return 0;
    }
    unless (Math->signbitf(-Math->NANF)) {
      return 0;
    }
    if (Math->signbitf(1.0f)) {
      return 0;
    }
    if (Math->signbitf(0.0f)) {
      return 0;
    }
    if (Math->signbitf(Math->NANF)) {
      return 0;
    }
    return 1;
  }

  static method isgreater : int () {
    unless (Math->isgreater(2.0, 1.0)) {
      return 0;
    }
    unless (Math->isgreater(Math->INFINITY, 1.0)) {
      return 0;
    }
    if (Math->isgreater(1.0, 2.0)) {
      return 0;
    }
    if (Math->isgreater(2.0, 2.0)) {
      return 0;
    }
    if (Math->isgreater(0.0, -0.0)) {
      return 0;
    }
    if (Math->isgreater(1.0, Math->INFINITY)) {
      return 0;
    }
    if (Math->isgreater(Math->INFINITY, Math->INFINITY)) {
      return 0;
    }
    if (Math->isgreater(Math->NAN, 1.0)) {
      return 0;
    }
    if (Math->isgreater(1.0, Math->NAN)) {
      return 0;
    }
    if (Math->isgreater(Math->NAN, Math->NAN)) {
      return 0;
    }
    return 1;
  }

  static method isgreaterf : int () {
    unless (Math->isgreaterf(2.0f, 1.0f)) {
      return 0;
    }
    unless (Math->isgreaterf(Math->INFINITYF, 1.0f)) {
      return 0;
    }
    if (Math->isgreaterf(1.0f, 2.0f)) {
      return 0;
    }
    if (Math->isgreaterf(2.0f, 2.0f)) {
      return 0;
    }
    if (Math->isgreaterf(0.0f, -0.0f)) {
      return 0;
    }
    if (Math->isgreaterf(1.0f, Math->INFINITYF)) {
      return 0;
    }
    if (Math->isgreaterf(Math->INFINITYF, Math->INFINITYF)) {
      return 0;
    }
    if (Math->isgreaterf(Math->NANF, 1.0f)) {
      return 0;
    }
    if (Math->isgreaterf(1.0f, Math->NANF)) {
      return 0;
    }
    if (Math->isgreaterf(Math->NANF, Math->NANF)) {
      return 0;
    }
    return 1;
  }

  static method isgreaterequal : int () {
    unless (Math->isgreaterequal(2.0, 1.0)) {
      return 0;
    }
    unless (Math->isgreaterequal(2.0, 2.0)) {
      return 0;
    }
    unless (Math->isgreaterequal(0.0, -0.0)) {
      return 0;
    }
    unless (Math->isgreaterequal(Math->INFINITY, 1.0)) {
      return 0;
    }
    unless (Math->isgreaterequal(Math->INFINITY, Math->INFINITY)) {
      return 0;
    }
    if (Math->isgreaterequal(1.0, 2.0)) {
      return 0;
    }
    if (Math->isgreaterequal(1.0, Math->INFINITY)) {
      return 0;
    }
    if (Math->isgreaterequal(Math->NAN, 1.0)) {
      return 0;
    }
    if (Math->isgreaterequal(1.0, Math->NAN)) {
      return 0;
    }
    if (Math->isgreaterequal(Math->NAN, Math->NAN)) {
      return 0;
    }
    return 1;
  }

  static method isgreaterequalf : int () {
    unless (Math->isgreaterequalf(2.0f, 1.0f)) {
      return 0;
    }
    unless (Math->isgreaterequalf(2.0f, 2.0f)) {
      return 0;
    }
    unless (Math->isgreaterequalf(0.0f, -0.0f)) {
      return 0;
    }
    unless (Math->isgreaterequalf(Math->INFINITYF, 1.0f)) {
      return 0;
    }
    unless (Math->isgreaterequalf(Math->INFINITYF, Math->INFINITYF)) {
      return 0;
    }
    if (Math->isgreaterequalf(1.0f, 2.0f)) {
      return 0;
    }
    if (Math->isgreaterequalf(1.0f, Math->INFINITYF)) {
      return 0;
    }
    if (Math->isgreaterequalf(Math->NANF, 1.0f)) {
      return 0;
    }
    if (Math->isgreaterequalf(1.0f, Math->NANF)) {
      return 0;
    }
    if (Math->isgreaterequalf(Math->NANF, Math->NANF)) {
      return 0;
    }
    return 1;
  }

  static method isless : int () {
    unless (Math->isless(1.0, 2.0)) {
      return 0;
    }
    unless (Math->isless(1.0, Math->INFINITY)) {
      return 0;
    }
    if (Math->isless(2.0, 1.0)) {
      return 0;
    }
    if (Math->isless(2.0, 2.0)) {
      return 0;
    }
    if (Math->isless(0.0, -0.0)) {
      return 0;
    }
    if (Math->isless(Math->INFINITY, 1.0)) {
      return 0;
    }
    if (Math->isless(Math->INFINITY, Math->INFINITY)) {
      return 0;
    }
    if (Math->isless(Math->NAN, 1.0)) {
      return 0;
    }
    if (Math->isless(1.0, Math->NAN)) {
      return 0;
    }
    if (Math->isless(Math->NAN, Math->NAN)) {
      return 0;
    }
    return 1;
  }

  static method islessf : int () {
    unless (Math->islessf(1.0f, 2.0f)) {
      return 0;
    }
    unless (Math->islessf(1.0f, Math->INFINITYF)) {
      return 0;
    }
    if (Math->islessf(2.0f, 1.0f)) {
      return 0;
    }
    if (Math->islessf(2.0f, 2.0f)) {
      return 0;
    }
    if (Math->islessf(0.0f, -0.0f)) {
      return 0;
    }
    if (Math->islessf(Math->INFINITYF, 1.0f)) {
      return 0;
    }
    if (Math->islessf(Math->INFINITYF, Math->INFINITYF)) {
      return 0;
    }
    if (Math->islessf(Math->NANF, 1.0f)) {
      return 0;
    }
    if (Math->islessf(1.0f, Math->NANF)) {
      return 0;
    }
    if (Math->islessf(Math->NANF, Math->NANF)) {
      return 0;
    }
    return 1;
  }

  static method islessequal : int () {
    unless (Math->islessequal(1.0, 2.0)) {
      return 0;
    }
    unless (Math->islessequal(2.0, 2.0)) {
      return 0;
    }
    unless (Math->islessequal(0.0, -0.0)) {
      return 0;
    }
    unless (Math->islessequal(1.0, Math->INFINITY)) {
      return 0;
    }
    unless (Math->islessequal(Math->INFINITY, Math->INFINITY)) {
      return 0;
    }
    if (Math->islessequal(2.0, 1.0)) {
      return 0;
    }
    if (Math->islessequal(Math->INFINITY, 1.0)) {
      return 0;
    }
    if (Math->islessequal(Math->NAN, 1.0)) {
      return 0;
    }
    if (Math->islessequal(1.0, Math->NAN)) {
      return 0;
    }
    if (Math->islessequal(Math->NAN, Math->NAN)) {
      return 0;
    }
    return 1;
  }

  static method islessequalf : int () {
    unless (Math->islessequalf(1.0f, 2.0f)) {
      return 0;
    }
    unless (Math->islessequalf(2.0f, 2.0f)) {
      return 0;
    }
    unless (Math->islessequalf(0.0f, -0.0f)) {
      return 0;
    }
    unless (Math->islessequalf(1.0f, Math->INFINITYF)) {
      return 0;
    }
    unless (Math->islessequalf(Math->INFINITYF, Math->INFINITYF)) {
      return 0;
    }
    if (Math->islessequalf(2.0f, 1.0f)) {
      return 0;
    }
    if (Math->islessequalf(Math->INFINITYF, 1.0f)) {
      return 0;
    }
    if (Math->islessequalf(Math->NANF, 1.0f)) {
      return 0;
    }
    if (Math->islessequalf(1.0f, Math->NANF)) {
      return 0;
    }
    if (Math->islessequalf(Math->NANF, Math->NANF)) {
      return 0;
    }
    return 1;
  }

  static method islessgreater : int () {
    unless (Math->islessgreater(1.0, 2.0)) {
      return 0;
    }
    unless (Math->islessgreater(2.0, 1.0)) {
      return 0;
    }
    unless (Math->islessgreater(1.0, Math->INFINITY)) {
      return 0;
    }
    unless (Math->islessgreater(Math->INFINITY, 1.0)) {
      return 0;
    }
    if (Math->islessgreater(2.0, 2.0)) {
      return 0;
    }
    if (Math->islessgreater(0.0, -0.0)) {
      return 0;
    }
    if (Math->islessgreater(Math->INFINITY, Math->INFINITY)) {
      return 0;
    }
    if (Math->islessgreater(Math->NAN, 1.0)) {
      return 0;
    }
    if (Math->islessgreater(1.0, Math->NAN)) {
      return 0;
    }
    if (Math->islessgreater(Math->NAN, Math->NAN)) {
      return 0;
    }
    return 1;
  }

  static method islessgreaterf : int () {
    unless (Math->islessgreaterf(1.0f, 2.0f)) {
      return 0;
    }
    unless (Math->islessgreaterf(2.0f, 1.0f)) {
      return 0;
    }
    unless (Math->islessgreaterf(1.0f, Math->INFINITYF)) {
      return 0;
    }
    unless (Math->islessgreaterf(Math->INFINITYF, 1.0f)) {
      return 0;
    }
    if (Math->islessgreaterf(2.0f, 2.0f)) {
      return 0;
    }
    if (Math->islessgreaterf(0.0f, -0.0f)) {
      return 0;
    }
    if (Math->islessgreaterf(Math->INFINITYF, Math->INFINITYF)) {
      return 0;
    }
    if (Math->islessgreaterf(Math->NANF, 1.0f)) {
      return 0;
    }
    if (Math->islessgreaterf(1.0f, Math->NANF)) {
      return 0;
    }
    if (Math->islessgreaterf(Math->NANF, Math->NANF)) {
      return 0;
    }
    return 1;
  }

  static method isunordered : int () {
    unless (Math->isunordered(1.0, Math->NAN)) {
      return 0;
    }
    if (Math->isunordered(1.0, 2.0)) {
      return 0;
    }
    if (Math->isunordered(1.0, Math->INFINITY)) {
      return 0;
    }
    return 1;
  }

  static method isunorderedf : int () {
    unless (Math->isunorderedf(1.0f, Math->NANF)) {
      return 0;
    }
    if (Math->isunorderedf(1.0f, 2.0f)) {
      return 0;
    }
    if (Math->isunorderedf(1.0f, Math->INFINITYF)) {
      return 0;
    }
    return 1;
  }

  static method complexf : int () {
    my $z1 = Math->complex(0.5f, 0.25f);

    unless ($z1->{re} == 0.5f && $z1->{im} == 0.25f) {
      return 0;
    }

    return 1;
  }


  static method complex : int () {
    my $z1 = Math->complex(0.00000000005, 0.000000000025);

    unless ($z1->{re} == 0.00000000005 && $z1->{im} == 0.000000000025) {
      return 0;
    }

    return 1;
  }

  static method caddf : int () {
    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2f;
    $z2->{re} = 0.125f;
    $z2->{im} = 0.0625f;

    my $z3 = Math->caddf($z1, $z2);

    unless ($z3->{re} == 0.625 && $z3->{im} == 0.3125) {
      return 0;
    }

    return 1;
  }

  static method cadd : int () {
    my $z1 : Complex_2d;
    $z1->{re} = 0.00000000005;
    $z1->{im} = 0.000000000025;

    my $z2 : Complex_2d;
    $z2->{re} = 0.0000000000125;
    $z2->{im} = 0.00000000000625;

    my $z3 = Math->cadd($z1, $z2);

    unless ($z3->{re} == 0.0000000000625 && $z3->{im} == 0.00000000003125) {
      return 0;
    }

    return 1;
  }

  static method csubf : int () {
    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2f;
    $z2->{re} = 0.125f;
    $z2->{im} = 0.0625f;

    my $z3 = Math->csubf($z1, $z2);

    unless ($z3->{re} == 0.5f - 0.125f && $z3->{im} == 0.25f - 0.0625f) {
      return 0;
    }

    return 1;
  }

  static method csub : int () {
    my $z1 : Complex_2d;
    $z1->{re} = 0.5;
    $z1->{im} = 0.25;

    my $z2 : Complex_2d;
    $z2->{re} = 0.125;
    $z2->{im} = 0.625;

    my $z3 = Math->csub($z1, $z2);

    unless ($z3->{re} == 0.5 - 0.125 && $z3->{im} == 0.25 - 0.625) {
      return 0;
    }

    return 1;
  }

  static method cnegf : int () {
    my $z : Complex_2f;
    $z->{re} = 0.5f;
    $z->{im} = 0.25f;
    
    my $z3 = Math->cnegf($z);
    
    unless ($z3->{re} == -0.5f && $z3->{im} == -0.25f) {
      return 0;
    }
    
    return 1;
  }

  static method cneg : int () {
    my $z : Complex_2d;
    $z->{re} = 0.5;
    $z->{im} = 0.25;
    
    my $z3 = Math->cneg($z);
    
    unless ($z3->{re} == -0.5 && $z3->{im} == -0.25) {
      return 0;
    }
    
    return 1;
  }

  static method cmulf : int () {
    my $eps = 0.001f;

    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2f;
    $z2->{re} = 0.125f;
    $z2->{im} = 0.0625f;

    my $z3 = Math->cmulf($z1, $z2);

    unless ($z3->{re} == 0.046875 && $z3->{im} == 0.0625) {
      return 0;
    }

    return 1;
  }

  static method cmul : int () {
    my $eps = 0.1;

    my $z1 : Complex_2d;
    $z1->{re} = 0.5;
    $z1->{im} = 0.25;

    my $z2 : Complex_2d;
    $z2->{re} = 0.125;
    $z2->{im} = 0.0625;

    my $z3 = Math->cmul($z1, $z2);

    unless ($z3->{re} == 0.046875 && $z3->{im} == 0.0625) {
      return 0;
    }

    return 1;
  }

  static method cdivf : int () {
    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2f;
    $z2->{re} = 2f;
    $z2->{im} = -2f;

    my $z3 = Math->cdivf($z1, $z2);
    
    unless ($z3->{re} == 0.0625 && $z3->{im} == 0.1875) {
      return 0;
    }

    return 1;
  }

  static method cdiv : int () {
    my $z1 : Complex_2d;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z2 : Complex_2d;
    $z2->{re} = 2f;
    $z2->{im} = -2f;

    my $z3 = Math->cdiv($z1, $z2);

    unless ($z3->{re} == 0.0625 && $z3->{im} == 0.1875) {
      return 0;
    }

    return 1;
  }

  static method cacos : int () {
    my $z1 : Complex_2d;
    $z1->{re} = 0.5;
    $z1->{im} = 0.25;

    my $z_out = Math->cacos($z1);
    
    unless ($z_out->{re} > 1.06918 && $z_out->{re} < 1.06919) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.281397 && $z_out->{im} < -0.281396) {
      return 0;
    }

    return 1;
  }

  static method cacosf : int () {
    my $z1 : Complex_2f;
    $z1->{re} = 0.5f;
    $z1->{im} = 0.25f;

    my $z_out = Math->cacosf($z1);
    
    unless ($z_out->{re} > 1.06918f && $z_out->{re} < 1.06919f) {
      return 0;
    }

    unless ($z_out->{im} > -0.28140f && $z_out->{im} < -0.28139f) {
      return 0;
    }

    return 1;
  }

  static method casin : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->casin($z1);
    
    unless ($z_out->{re} > 0.5016088532755 && $z_out->{re} < 0.5016088532756) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2813960562452 && $z_out->{im} < 0.2813960562453) {
      return 0;
    }

    return 1;
  }

  static method casinf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->casinf($z1);
    
    unless ($z_out->{re} > 0.5016 && $z_out->{re} < 0.5017) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2813 && $z_out->{im} < 0.2814) {
      return 0;
    }

    return 1;
  }

  static method catan : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->catan($z1);
    
    unless ($z_out->{re} > 0.4842544903299 && $z_out->{re} < 0.4842544903300) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2005866181312 && $z_out->{im} < 0.2005866181313) {
      return 0;
    }

    return 1;
  }

  static method catanf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->catanf($z1);
    
    unless ($z_out->{re} > 0.4842 && $z_out->{re} < 0.4843) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2005 && $z_out->{im} < 0.2006) {
      return 0;
    }

    return 1;
  }

  static method ccos : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->ccos($z1);
    
    unless ($z_out->{re} > 0.9051501505596 && $z_out->{re} < 0.9051501505597) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.1211087960439 && $z_out->{im} < -0.1211087960438) {
      return 0;
    }

    return 1;
  }

  static method ccosf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->ccosf($z1);
    
    unless ($z_out->{re} > 0.905 && $z_out->{re} < 0.906) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.1212 && $z_out->{im} < -0.1211) {
      return 0;
    }

    return 1;
  }

  static method csin : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->csin($z1);
    
    unless ($z_out->{re} > 0.4944857809331 && $z_out->{re} < 0.4944857809332) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2216881641495 && $z_out->{im} < 0.2216881641496) {
      return 0;
    }

    return 1;
  }

  static method csinf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->csinf($z1);
    
    unless ($z_out->{re} > 0.4944 && $z_out->{re} < 0.4945) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2216 && $z_out->{im} < 0.2217) {
      return 0;
    }

    return 1;
  }

  static method ctan : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->ctan($z1);
    
    unless ($z_out->{re} > 0.5045007026985 && $z_out->{re} < 0.5045007026986) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.3124206925025 && $z_out->{im} < 0.3124206925026) {
      return 0;
    }

    return 1;
  }

  static method ctanf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->ctanf($z1);
    
    unless ($z_out->{re} > 0.5045 && $z_out->{re} < 0.5046) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.3124 && $z_out->{im} < 0.3125) {
      return 0;
    }

    return 1;
  }

  static method cacosh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->cacosh($z1);
    
    unless ($z_out->{re} > 0.2813960562452 && $z_out->{re} < 0.2813960562453) {
      return 0;
    }
    
    unless ($z_out->{im} > 1.06918747351 && $z_out->{im} < 1.06918747352) {
      return 0;
    }

    return 1;
  }

  static method cacoshf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->cacoshf($z1);
    
    unless ($z_out->{re} > 0.2813 && $z_out->{re} < 0.2814) {
      return 0;
    }
    
    unless ($z_out->{im} > 1.0691 && $z_out->{im} < 1.0692) {
      return 0;
    }

    return 1;
  }

  static method casinh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->casinh($z1);
    
    unless ($z_out->{re} > 0.4926756834207 && $z_out->{re} < 0.4926756834208) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2243284526346 && $z_out->{im} < 0.2243284526347) {
      return 0;
    }

    return 1;
  }

  static method casinhf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->casinhf($z1);
    
    unless ($z_out->{re} > 0.4926 && $z_out->{re} < 0.4927) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2243 && $z_out->{im} < 0.2244) {
      return 0;
    }

    return 1;
  }

  static method catanh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->catanh($z1);
    
    unless ($z_out->{re} > 0.5003700000525 && $z_out->{re} < 0.5003700000526) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.3143981432077 && $z_out->{im} < 0.3143981432078) {
      return 0;
    }

    return 1;
  }

  static method catanhf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->catanhf($z1);
    
    unless ($z_out->{re} > 0.5003 && $z_out->{re} < 0.5004) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.3143 && $z_out->{im} < 0.3144) {
      return 0;
    }

    return 1;
  }

  static method ccosh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->ccosh($z1);
    
    unless ($z_out->{re} > 1.092570804731 && $z_out->{re} < 1.092570804732) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.1289210417280 && $z_out->{im} < 0.1289210417281) {
      return 0;
    }

    return 1;
  }

  static method ccoshf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->ccoshf($z1);
    
    unless ($z_out->{re} > 1.092 && $z_out->{re} < 1.093) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.1289 && $z_out->{im} < 0.1290) {
      return 0;
    }

    return 1;
  }

  static method csinh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->csinh($z1);
    
    unless ($z_out->{re} > 0.5048957143879 && $z_out->{re} < 0.5048957143880) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2789791283502 && $z_out->{im} < 0.2789791283503) {
      return 0;
    }

    return 1;
  }

  static method csinhf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->csinhf($z1);
    
    unless ($z_out->{re} > 0.5048 && $z_out->{re} < 0.5049) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.2789 && $z_out->{im} < 0.2790) {
      return 0;
    }

    return 1;
  }

  static method ctanh : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->ctanh($z1);
    
    unless ($z_out->{re} > 0.4854872810241 && $z_out->{re} < 0.4854872810242) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.198055449951 && $z_out->{im} < 0.198055449952) {
      return 0;
    }

    return 1;
  }

  static method ctanhf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->ctanhf($z1);
    
    unless ($z_out->{re} > 0.4854 && $z_out->{re} < 0.4855) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.1980 && $z_out->{im} < 0.1981) {
      return 0;
    }

    return 1;
  }

  static method clog : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->clog($z1);
    
    unless ($z_out->{re} > -0.581575404903 && $z_out->{re} < -0.581575404902) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.4636476090008 && $z_out->{im} < 0.4636476090009) {
      return 0;
    }

    return 1;
  }

  static method clogf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->clogf($z1);
    
    unless ($z_out->{re} > -0.5816 && $z_out->{re} < -0.5815) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.4636 && $z_out->{im} < 0.4637) {
      return 0;
    }

    return 1;
  }

  static method cabs : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->cabs($z1);
    
    unless ($z_out > 0.5590169943749 && $z_out < 0.5590169943750) {
      return 0;
    }

    return 1;
  }

  static method cabsf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->cabsf($z1);
    
    unless ($z_out > 0.5590 && $z_out < 0.5591) {
      return 0;
    }

    return 1;
  }

  static method carg : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->carg($z1);
    
    unless ($z_out > 0.463647609000 && $z_out < 0.463647609001) {
      return 0;
    }

    return 1;
  }

  static method cargf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->cargf($z1);
    
    unless ($z_out > 0.4636 && $z_out < 0.4637) {
      return 0;
    }

    return 1;
  }

  static method conj : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->conj($z1);
    
    unless ($z_out->{re} == 0.5) {
      return 0;
    }
    
    unless ($z_out->{im} == -0.25) {
      return 0;
    }

    return 1;
  }

  static method conjf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->conjf($z1);
    
    unless ($z_out->{re} == 0.5f) {
      return 0;
    }
    
    unless ($z_out->{im} == -0.25f) {
      return 0;
    }

    return 1;
  }


  static method csqrt : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->csqrt($z1);
    
    unless ($z_out->{re} > 0.72767334511267 && $z_out->{re} < 0.72767334511268) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.17178037486 && $z_out->{im} < 0.17178037487) {
      return 0;
    }

    return 1;
  }

  static method csqrtf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->csqrtf($z1);
    
    unless ($z_out->{re} > 0.7276 && $z_out->{re} < 0.7277) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.1717 && $z_out->{im} < 0.1718) {
      return 0;
    }

    return 1;
  }

  static method cpow : int () {
    my $z1 = Math->complex(0.5, 0.25);
    my $z2 = Math->complex(1.5, 1.25);

    my $z_out = Math->cpow($z1, $z2);
    
    unless ($z_out->{re} > 0.2340036050149 && $z_out->{re} < 0.2340036050150) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.007373047187613 && $z_out->{im} < -0.007373047187612) {
      return 0;
    }

    return 1;
  }

  static method cpowf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);
    my $z2 = Math->complexf(1.5f, 1.25f);

    my $z_out = Math->cpowf($z1, $z2);
    
    unless ($z_out->{re} > 0.2340 && $z_out->{re} < 0.2341) {
      return 0;
    }
    
    unless ($z_out->{im} > -0.0074 && $z_out->{im} < -0.0073) {
      return 0;
    }

    return 1;
  }

  static method cexp : int () {
    my $z1 = Math->complex(0.5, 0.25);

    my $z_out = Math->cexp($z1);
    unless ($z_out->{re} > 1.5974665191199 && $z_out->{re} < 1.5974665191200) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.407900170078 && $z_out->{im} < 0.407900170079) {
      return 0;
    }

    return 1;
  }

  static method cexpf : int () {
    my $z1 = Math->complexf(0.5f, 0.25f);

    my $z_out = Math->cexpf($z1);
    
    unless ($z_out->{re} > 1.5974 && $z_out->{re} < 1.5975) {
      return 0;
    }
    
    unless ($z_out->{im} > 0.4079 && $z_out->{im} < 0.4080) {
      return 0;
    }

    return 1;
  }

  static method spvm_core_double_to_string_nan : int () {
    
    {
      my $string = "NaN";
      
      my $ret = (double)$string;
      
      unless (Math->isnan($ret)) {
        return 0;
      }
    }
    
    {
      my $string = "NAN";
      
      my $ret = (double)$string;
      
      unless (Math->isnan($ret)) {
        return 0;
      }
    }
    
    {
      my $string = "Inf";
      
      my $ret = (double)$string;
      
      unless (Math->isinf($ret) && $ret > 0) {
        return 0;
      }
    }
    
    {
      my $string = "INF";
      
      my $ret = (double)$string;
      
      unless (Math->isinf($ret) && $ret > 0) {
        return 0;
      }
    }
    
    {
      my $string = "-Inf";
      
      my $ret = (double)$string;
      
      unless (Math->isinf($ret) && $ret < 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method spvm_core_double_to_string_inf : int () {
    
    {
      my $string = "Inf";
      
      my $ret = (double)$string;
      
      unless (Math->isinf($ret) && $ret > 0) {
        return 0;
      }
    }
    
    {
      my $string = "INF";
      
      my $ret = (double)$string;
      
      unless (Math->isinf($ret) && $ret > 0) {
        return 0;
      }
    }
    
    {
      my $string = "-Inf";
      
      my $ret = (double)$string;
      
      unless (Math->isinf($ret) && $ret < 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method spvm_core_float_to_string_nan : int () {
    
    {
      my $string = "NaN";
      
      my $ret = (float)$string;
      
      unless (Math->isnanf($ret)) {
        return 0;
      }
    }
    
    {
      my $string = "NAN";
      
      my $ret = (float)$string;
      
      unless (Math->isnanf($ret)) {
        return 0;
      }
    }
    
    {
      my $string = "Inf";
      
      my $ret = (float)$string;
      
      unless (Math->isinff($ret) && $ret > 0) {
        return 0;
      }
    }
    
    {
      my $string = "INF";
      
      my $ret = (float)$string;
      
      unless (Math->isinff($ret) && $ret > 0) {
        return 0;
      }
    }
    
    {
      my $string = "-Inf";
      
      my $ret = (float)$string;
      
      unless (Math->isinff($ret) && $ret < 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method spvm_core_float_to_string_inf : int () {
    
    {
      my $string = "Inf";
      
      my $ret = (float)$string;
      
      unless (Math->isinff($ret) && $ret > 0) {
        return 0;
      }
    }
    
    {
      my $string = "INF";
      
      my $ret = (float)$string;
      
      unless (Math->isinff($ret) && $ret > 0) {
        return 0;
      }
    }
    
    {
      my $string = "-Inf";
      
      my $ret = (float)$string;
      
      unless (Math->isinff($ret) && $ret < 0) {
        return 0;
      }
    }
    
    return 1;
  }

}
