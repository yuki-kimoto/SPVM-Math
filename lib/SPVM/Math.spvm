# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Math : precompile {
  version "1.003";
  
  use Complex_2f;
  use Complex_2d;
  
  static method abs : int ($x : int) {
    if ($x < 0) {
      return -$x;
    }
    else {
      return $x;
    }
  }
  
  native static method acos : double ($x : double);
  
  native static method acosf : float ($x : float);
  
  native static method acosh : double ($x : double);
  
  native static method acoshf : float ($x : float);
  
  native static method asin : double ($x : double);
  
  native static method asinf : float ($x : float);
  
  native static method asinh : double ($x : double);
  
  native static method asinhf : float ($x : float);
  
  native static method atan : double ($x : double);
  
  native static method atan2 : double ($y : double, $x : double);
  
  native static method atan2f : float ($y : float, $x : float);
  
  native static method atanf : float ($x : float);
  
  native static method atanh : double ($x : double);
  
  native static method atanhf : float ($x : float);
  
  native static method cabs : double ($z : Complex_2d);
  
  native static method cabsf : float ($z : Complex_2f);
  
  native static method cacos : Complex_2d ($z : Complex_2d);
  
  native static method cacosf : Complex_2f ($z : Complex_2f);
  
  native static method cacosh : Complex_2d ($z : Complex_2d);
  
  native static method cacoshf : Complex_2f ($z : Complex_2f);
  
  static method cadd : Complex_2d ($z1 : Complex_2d, $z2 : Complex_2d) {
    my $z_ret : Complex_2d;
    $z_ret->{re} = $z1->{re} + $z2->{re};
    $z_ret->{im} = $z1->{im} + $z2->{im};
    return $z_ret;
  }
  
  static method caddf : Complex_2f ($z1 : Complex_2f, $z2 : Complex_2f) {
    my $z_ret : Complex_2f;
    $z_ret->{re} = $z1->{re} + $z2->{re};
    $z_ret->{im} = $z1->{im} + $z2->{im};
    return $z_ret;
  }
  
  native static method carg : double ($z : Complex_2d);
  
  native static method cargf : float ($z : Complex_2f);
  
  native static method casin : Complex_2d ($z : Complex_2d);
  
  native static method casinf : Complex_2f ($z : Complex_2f);
  
  native static method casinh : Complex_2d ($z : Complex_2d);
  
  native static method casinhf : Complex_2f ($z : Complex_2f);
  
  native static method catan : Complex_2d ($z : Complex_2d);
  
  native static method catanf : Complex_2f ($z : Complex_2f);
  
  native static method catanh : Complex_2d ($z : Complex_2d);
  
  native static method catanhf : Complex_2f ($z : Complex_2f);
  
  native static method cbrt : double ($x : double);
  
  native static method cbrtf : float ($x : float);
  
  native static method ccos : Complex_2d ($z : Complex_2d);
  
  native static method ccosf : Complex_2f ($z : Complex_2f);
  
  native static method ccosh : Complex_2d ($z : Complex_2d);
  
  native static method ccoshf : Complex_2f ($z : Complex_2f);
  
  static method cdiv : Complex_2d ($z1 : Complex_2d, $z2 : Complex_2d) {
    my $z_ret : Complex_2d;
    $z_ret->{re} = ($z1->{re} * $z2->{re} + $z1->{im} * $z2->{im}) / ($z2->{re} * $z2->{re} + $z2->{im} * $z2->{im});
    $z_ret->{im} = ($z1->{im} * $z2->{re} - $z1->{re} * $z2->{im}) / ($z2->{re} * $z2->{re} + $z2->{im} * $z2->{im});
    return $z_ret;
  }
  
  static method cdivf : Complex_2f ($z1 : Complex_2f, $z2 : Complex_2f) {
    my $z_ret : Complex_2f;
    $z_ret->{re} = ($z1->{re} * $z2->{re} + $z1->{im} * $z2->{im}) / ($z2->{re} * $z2->{re} + $z2->{im} * $z2->{im});
    $z_ret->{im} = ($z1->{im} * $z2->{re} - $z1->{re} * $z2->{im}) / ($z2->{re} * $z2->{re} + $z2->{im} * $z2->{im});
    return $z_ret;
  }
  
  native static method ceil : double ($x : double);
  native static method ceilf : float ($x : float);
  native static method cexp : Complex_2d ($z : Complex_2d);
  native static method cexpf : Complex_2f ($z : Complex_2f);
  native static method clog : Complex_2d ($z : Complex_2d);
  native static method clogf : Complex_2f ($z : Complex_2f);
  
  static method cmul : Complex_2d ($z1 : Complex_2d, $z2 : Complex_2d) {
    my $z_ret : Complex_2d;
    $z_ret->{re} = $z1->{re} * $z2->{re} - $z1->{im} * $z2->{im};
    $z_ret->{im} = $z1->{re} * $z2->{im} + $z1->{im} * $z2->{re};
    return $z_ret;
  }
  
  static method cmulf : Complex_2f ($z1 : Complex_2f, $z2 : Complex_2f) {
    my $z_ret : Complex_2f;
    $z_ret->{re} = $z1->{re} * $z2->{re} - $z1->{im} * $z2->{im};
    $z_ret->{im} = $z1->{re} * $z2->{im} + $z1->{im} * $z2->{re};
    return $z_ret;
  }
  
  static method complex : Complex_2d ($re : double, $im : double) {
    my $z_ret : Complex_2d;
    $z_ret->{re} = $re;
    $z_ret->{im} = $im;
    return $z_ret;
  }
  
  static method complexf : Complex_2f ($re : float, $im : float) {
    my $z_ret : Complex_2f;
    $z_ret->{re} = $re;
    $z_ret->{im} = $im;
    return $z_ret;
  }
  
  native static method conj : Complex_2d ($z : Complex_2d);
  
  native static method conjf : Complex_2f ($z : Complex_2f);
  
  native static method copysign : double ($x : double, $y : double);
  
  native static method copysignf : float ($x : float, $y : float);
  
  native static method cos : double ($x : double);
  
  native static method cosf : float ($x : float);
  
  native static method cosh : double ($x : double);
  
  native static method coshf : float ($x : float);
  
  native static method cpow : Complex_2d ($z1 : Complex_2d, $z2 : Complex_2d);
  
  native static method cpowf : Complex_2f ($z1 : Complex_2f, $z2 : Complex_2f);
  
  static method cscamul : Complex_2d ($c : double, $z : Complex_2d) {
    my $z_ret : Complex_2d;
    
    $z_ret->{re} = $c * $z->{re};
    $z_ret->{im} = $c * $z->{im};
    
    return $z_ret;
  }
  
  static method cscamulf : Complex_2f ($c : float, $z : Complex_2f) {
    my $z_ret : Complex_2f;
    
    $z_ret->{re} = $c * $z->{re};
    $z_ret->{im} = $c * $z->{im};
    
    return $z_ret;
  }
  
  native static method csin : Complex_2d ($z : Complex_2d);
  
  native static method csinf : Complex_2f ($z : Complex_2f);
  
  native static method csinh : Complex_2d ($z : Complex_2d);
  
  native static method csinhf : Complex_2f ($z : Complex_2f);
  
  native static method csqrt : Complex_2d ($z : Complex_2d);
  
  native static method csqrtf : Complex_2f ($z : Complex_2f);
  
  static method csub : Complex_2d ($z1 : Complex_2d, $z2 : Complex_2d) {
    my $z_ret : Complex_2d;
    $z_ret->{re} = $z1->{re} - $z2->{re};
    $z_ret->{im} = $z1->{im} - $z2->{im};
    return $z_ret;
  }
  
  static method csubf : Complex_2f ($z1 : Complex_2f, $z2 : Complex_2f) {
    my $z_ret : Complex_2f;
    $z_ret->{re} = $z1->{re} - $z2->{re};
    $z_ret->{im} = $z1->{im} - $z2->{im};
    return $z_ret;
  }

  static method cneg : Complex_2d ($z : Complex_2d) {
    my $z_ret : Complex_2d;
    $z_ret->{re} = -$z->{re};
    $z_ret->{im} = -$z->{im};
    return $z_ret;
  }
  
  static method cnegf : Complex_2f ($z : Complex_2f) {
    my $z_ret : Complex_2f;
    $z_ret->{re} = -$z->{re};
    $z_ret->{im} = -$z->{im};
    return $z_ret;
  }
  
  native static method ctan : Complex_2d ($z : Complex_2d);
  
  native static method ctanf : Complex_2f ($z : Complex_2f);
  
  native static method ctanh : Complex_2d ($z : Complex_2d);
  
  native static method ctanhf : Complex_2f ($z : Complex_2f);
  
  static method E : double () { return 0x1.5bf0a8b145769p+1; }
  
  native static method erf : double ($x : double);
  
  native static method erfc : double ($x : double);
  
  native static method erfcf : float ($x : float);
  
  native static method erff : float ($x : float);
  
  native static method exp : double ($x : double);
  
  native static method exp2 : double ($x : double);
  
  native static method exp2f : float ($x : float);
  
  native static method expf : float ($x : float);
  
  native static method expm1 : double ($x : double);
  
  native static method expm1f : float ($x : float);
  
  native static method fabs : double ($x : double);
  
  native static method fabsf : float ($x : float);
  
  native static method fdim : double ($x : double, $y : double);
  
  native static method fdimf : float ($x : float, $y : float);
  
  native static method FE_DOWNWARD : int ();
  
  native static method FE_TONEAREST : int ();
  
  native static method FE_TOWARDZERO : int ();
  
  native static method FE_UPWARD : int ();
  
  native static method fesetround : int ($round : int);
  
  native static method floor : double ($x : double);
  
  native static method floorf : float ($x : float);
  
  native static method fma : double ($x : double, $y : double, $x3 : double);
  
  native static method fmaf : float ($x : float, $y : float, $x3 : float);
  
  native static method fmax : double ($x : double, $y : double);
  
  native static method fmaxf : float ($x : float, $y : float);
  
  native static method fmin : double ($x : double, $y : double);
  
  native static method fminf : float ($x : float, $y : float);
  
  native static method fmod : double ($x : double, $y : double);
  
  native static method fmodf : float ($x : float, $y : float);
  
  native static method FP_ILOGB0 : int ();
  
  native static method FP_ILOGBNAN : int ();
  
  native static method FP_INFINITE : int ();
  
  native static method FP_NAN : int ();
  
  native static method FP_ZERO : int ();
  
  native static method fpclassify : int ($x : double);
  
  native static method fpclassifyf : int ($x : float);
  
  native static method frexp : double ($x : double, $exp : int*);
  
  native static method frexpf : float ($x : float, $exp : int*);
  
  native static method HUGE_VAL : double ();
  
  native static method HUGE_VALF : float ();
  
  native static method hypot : double ($x : double, $y : double);
  
  native static method hypotf : float ($x : float, $y : float);
  
  native static method ilogb : int ($x : double);
  
  native static method ilogbf : int ($x : float);
  
  native static method INFINITY : double ();
  
  native static method INFINITYF : float ();
  
  native static method isfinite : int ($x : double);
  
  native static method isfinitef : int($x : float);
  
  native static method isgreater : int ($x : double, $y : double);
  
  native static method isgreaterequal : int ($x : double, $y : double);
  
  native static method isgreaterequalf : int ($x : float, $y : float);
  
  native static method isgreaterf : int ($x : float, $y : float);
  
  native static method isinf : int ($x : double);
  
  native static method isinff : int($x : float);
  
  native static method isless : int ($x : double, $y : double);
  
  native static method islessequal : int ($x : double, $y : double);
  
  native static method islessequalf : int ($x : float, $y : float);
  
  native static method islessf : int ($x : float, $y : float);
  
  native static method islessgreater : int ($x : double, $y : double);
  
  native static method islessgreaterf : int ($x : float, $y : float);
  
  native static method isnan : int ($x : double);
  
  native static method isnanf : int ($x : float);
  
  native static method isunordered : int ($x : double, $y : double);
  
  native static method isunorderedf : int ($x : float, $y : float);
  
  static method labs : long ($x : long) {
    if ($x < 0) {
      return -$x;
    }
    else {
      return $x;
    }
  }
  
  native static method ldexp : double ($x : double, $exp : int);
  
  native static method ldexpf : float ($x : float, $exp : int);
  
  native static method lgamma : double ($x : double);
  
  native static method lgammaf : float ($x : float);
  
  native static method log : double ($x : double);
  
  native static method log10 : double ($x : double);
  
  native static method log10f : float ($x : float);
  
  native static method log1p : double ($x : double);
  
  native static method log1pf : float ($x : float);
  
  native static method log2 : double ($x : double);
  
  native static method log2f : float ($x : float);
  
  native static method logb : double ($x : double);
  
  native static method logbf : float ($x : float);
  
  native static method logf : float ($x : float);
  
  native static method lround : long ($x : double);
  
  native static method lroundf : long ($x : float);
  
  native static method modf : double ($x : double, $intpart : double*);
  
  native static method modff : float ($x : float, $intpart : float*);
  
  native static method nan : double ($string : string);
  
  native static method NAN : double ();
  
  native static method NANF : float ();
  
  native static method nanf : float ($string : string);
  
  native static method nearbyint : double ($x : double);
  
  native static method nearbyintf : float ($x : float);
  
  native static method nextafter : double ($x : double, $y : double);
  
  native static method nextafterf : float ($x : float, $y : float);
  
  native static method nexttoward : double ($x : double, $y : double);
  
  native static method nexttowardf : float ($x : float, $y : double);
  
  static method PI : double () { return 0x1.921fb54442d18p+1; }
  
  native static method pow : double ($x : double, $y : double);
  
  native static method powf : float ($x : float, $y : float);
  
  native static method remainder : double ($x : double, $y : double);
  
  native static method remainderf : float ($x : float, $y : float);
  
  native static method remquo : double ($x : double, $y : double, $quo : int*);
  
  native static method remquof : float ($x : float, $y : float, $quo : int*);
  
  native static method round : double ($x : double);
  
  native static method roundf : float ($x : float);
  
  native static method scalbln : double ($x : double, $exp : long);
  
  native static method scalblnf : float ($x : float, $exp : long);
  
  native static method scalbn : double ($x : double, $exp : int);
  
  native static method scalbnf : float ($x : float, $exp : int);
  
  native static method signbit : int ($x : double);
  
  native static method signbitf : int ($x : float);
  
  native static method sin : double ($x : double);
  
  native static method sinf : float ($x : float);
  
  native static method sinh : double ($x : double);
  
  native static method sinhf : float ($x : float);
  
  native static method sqrt : double ($x : double);
  
  native static method sqrtf : float ($x : float);
  
  native static method tan : double ($x : double);
  
  native static method tanf : float ($x : float);
  
  native static method tanh : double ($x : double);
  
  native static method tanhf : float ($x : float);
  
  native static method tgamma : double ($x : double);
  
  native static method tgammaf : float ($x : float);
  
  native static method trunc : double ($x : double);
  
  native static method truncf : float ($x : float);
}
